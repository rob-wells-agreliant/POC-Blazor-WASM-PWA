@inject HttpClient Http
<div class="alert alert-secondary mt-4">
    <span class="oi oi-fork me-2" aria-hidden="true"></span>
    <strong>@VerNum</strong>
</div>

@code {
    public string? VerNum { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var AssemblyVer = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;
        TimeSpan t = DateTime.UtcNow - new DateTime(1970, 1, 1);
        int secondsSinceEpoch = (int)t.TotalSeconds;

        try
        {
            // create request object
            var request = new HttpRequestMessage(HttpMethod.Get,
            "https://agrversions.azurewebsites.net/version/MyPWABlazor?d={secondsSinceEpoch}");
            // add custom http header
            request.Headers.Add("Access-Control-Allow-Origin", "https://localhost:8080");
            request.Headers.Add("Access-Control-Allow-Credentials", "true");
            // send request
            using var httpResponse = await Http.SendAsync(request);

            var appVer = await httpResponse.Content.ReadFromJsonAsync<AppVersion>();
            if (AssemblyVer.Major < appVer.Major)
            {
                VerNum = $"{AssemblyVer.Major}.{AssemblyVer.Minor}.{AssemblyVer.Revision} (new app is available - please update)";
            }
            else if (AssemblyVer.Minor < appVer.Minor)
            {
                VerNum = $"{AssemblyVer.Major}.{AssemblyVer.Minor}.{AssemblyVer.Revision} (new feature is available - please update)";
            }
            else if (AssemblyVer.Revision < appVer.Revision)
            {
                VerNum = $"{AssemblyVer.Major}.{AssemblyVer.Minor}.{AssemblyVer.Revision} (new revision is available - please update)";
            }
            else
            {
                VerNum = $"{AssemblyVer.Major}.{AssemblyVer.Minor}.{AssemblyVer.Revision} you are running the latest version";
            }
        }
        catch (Exception e)
        {
            VerNum = "{AssemblyVer.Major}.{AssemblyVer.Minor}.{AssemblyVer.Revision}<br/>(this software has detected no network and is now offline)";
        }
    }

    class AppVersion
    {
        public int Major { get; set; }
        public int Minor { get; set; }
        public int Build { get; set; }
        public int Revision { get; set; }
    }
}